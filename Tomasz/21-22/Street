package weblab;

import java.util.*;

class Street {

    // Use the fields below to store the heads and tails of the even and odd side of the street
    // Do NOT change the names of the fields or how they are initialised in the constructor!
    // You may NOT add more fields to the class.
    Node headEven;

    Node tailEven;

    Node headOdd;

    Node tailOdd;

    /**
     * Make an empty street.
     */
    public Street() {
        headEven = new Node();
        tailEven = new Node();
        headEven.setNext(tailEven);
        tailEven.setPrev(headEven);
        headOdd = new Node();
        tailOdd = new Node();
        headOdd.setNext(tailOdd);
        tailOdd.setPrev(headOdd);
    }

    /**
     * Removes a house from the street.
     * If the house does not exist, the street should be unchanged and the method should return null.
     *
     * This method must run in O(n + m) time.
     * Here is n the number of even houses, and m the number of odd houses.
     *
     * @param houseNumber number of the house to be removed from this street, if present
     * @return if present, the removed house, otherwise null
     */
    public House removeHouse(int houseNumber) {
        int currIdx = Integer.MIN_VALUE;
        Node currentNode;
        if(houseNumber%2 == 0) {
            currentNode = headEven;
            if(headEven == null || headEven.getNext() == null)
                return null;
            while(currentNode != null) {
                if(currentNode.getHouse() == null) {
                    currentNode = currentNode.getNext();
                    continue;
                }
                    
                currIdx = currentNode.getHouse().getHouseNumber();
                if(currIdx == houseNumber) {
                    Node prev = currentNode.getPrev();
                    Node next = currentNode.getNext();
                    prev.setNext(next);
                    next.setPrev(prev);
                    Node currOdd = headOdd.getNext();
                    while(currOdd != null) {
                        currOdd.getOpposingHouses().remove(currentNode.getHouse());
                        currOdd = currOdd.getNext();
                    }
                    return currentNode.getHouse();
                }
                if(currIdx > houseNumber )
                    return null;
                currentNode = currentNode.getNext();
                
            }
            return null;
        }
        else {
            
            currentNode = headOdd;
            if(headOdd == null || headOdd.getNext() == null)
                return null;
            while(currentNode != null) {
                if(currentNode.getHouse() == null) {

                    currentNode = currentNode.getNext();
                    continue;
                }
                    
                currIdx = currentNode.getHouse().getHouseNumber();
                if(currIdx == houseNumber) {
                    Node prev = currentNode.getPrev();
                    Node next = currentNode.getNext();
                    prev.setNext(next);
                    next.setPrev(prev);
                    Node currEven = headEven.getNext();
                    while(currEven != null) {
                        currEven.getOpposingHouses().remove(currentNode.getHouse());
                        currEven = currEven.getNext();
                    }
                    return currentNode.getHouse();
                }
                if(currIdx > houseNumber )
                    return null;
                currentNode = currentNode.getNext();
            }
            return null;
        }



    }

    /**
     * Puts all the houses in the street in a list in increasing order of house number.
     *
     * This method must run in O(n+m) time.
     * Here n is the number of even houses, and m is the number of odd houses.
     *
     * @return a list of all the houses in the street in increasing order of house number
     */
    public List<House> collectAllHouses() {
        Node currOdd = headOdd.getNext();
        Node currEven = headEven.getNext();
        List<House> res = new ArrayList<>();
        while((currOdd != null && currOdd.getHouse() != null ) 
            || (currEven != null && currEven.getHouse() != null )) {
                if(!(currOdd != null && currOdd.getHouse() != null)) {
                    res.add(currEven.getHouse());
                    currEven = currEven.getNext();
                    
                }
                else if(!(currEven != null && currEven.getHouse() != null)) {
                    res.add(currOdd.getHouse());
                    currOdd = currOdd.getNext();
                    
                }
                else {
                    if(currEven.getHouse().getHouseNumber() < currOdd.getHouse().getHouseNumber()) {
                        res.add(currEven.getHouse());
                        currEven = currEven.getNext();
                    }
                    else {
                         res.add(currOdd.getHouse());
                        currOdd = currOdd.getNext();
                    }
                }


        }
        return res;
    }

    /**
     * Gets the number of even numbered houses in the street.
     *
     * @return the number of houses with an even house number
     */
    public int getNumEven() {
        Node currentNode = headEven.getNext();
        int res = 0;
        while(currentNode != null && currentNode.getHouse() != null) {
            System.out.println("Currently: " + currentNode);
            res++;
            currentNode = currentNode.getNext();
        }

        return res;
    }
}
