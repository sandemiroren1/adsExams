import java.util.*;

class Solution {
  /**
   * Counts the number of vertices in the same connected component as v in graph g.
   * This is done using depth first search.
   *
   * Returns 0 if the graph or vertex is null
   *
   * @param g
   *     The graph to count vertices in.
   * @param v
   *     The vertex to start counting at.
   * @return the number of vertices in the same connected component.
   */
  public static int countVertices(Graph g, Graph.Vertex v) {
    if(g == null || v == null){
      return 0;
    } 

    Stack<Graph.Vertex> stack = new Stack<Graph.Vertex>();
    Set<Graph.Vertex> explored = new HashSet<Graph.Vertex>();

    stack.push(v);
    int counter = 0;
    explored.add(v);

    while(!stack.isEmpty()){
      Graph.Vertex root = stack.pop();
      counter++;
      Collection<Graph.Vertex> neigh = g.getNeighbours(root);

      for(Graph.Vertex x : neigh){
        if(!explored.contains(x)){
          stack.push(x);
          explored.add(x);
        }
      }
    }
    return counter;
  }
}
